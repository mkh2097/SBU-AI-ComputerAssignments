# -*- coding: utf-8 -*-
"""FinalMachines.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cqWKtsaIv_zxGPreBmbLhlTBKgDLksCZ
"""

init_inv, car_num = input().split()
init_inv = int(init_inv)
car_num = int(car_num)

info_list = list()
for i in range(car_num):
    car_price, init_value, *more = input().split()
    car_price = int(car_price)
    init_value = int(init_value)
    if not (len(more) == 0 or len(more) == 2):
      raise Exception("Invalid input has been detected!")
    elif len(more) == 2:
      dist, dec_rate = more
      dist = int(dist)
      dec_rate = int(dec_rate)
      init_value = init_value - dist * dec_rate
    info_list.append((car_price, init_value))

import numpy as np
info_list = np.array(info_list)

from numpy.random import randint
def initialize(pop_number=40):
  init_population = [randint(0, 2, car_num).tolist() for _ in range(pop_number)]
  return init_population

import numpy as np
def evaluate(person):
  val_score = np.sum(info_list.T[1], where=person, axis=0)
  price_score = np.sum(info_list.T[0], where=person, axis=0)
  score = val_score
  if price_score > init_inv:
    score = 0    
  return score

def select(population, scores):
  sorted_list = [x for _,x in sorted(zip(scores,population))]
  sorted_list = np.flip(sorted_list, 0)
  return sorted_list[0:10]

def mutate(child):
  child_mut = child.copy() 
  for i in range(len(child)):
    if np.random.rand() < 0.2:
      if child_mut[i] == 1:
        child_mut[i] = 0
      elif child_mut[i] == 0:
        child_mut[i] = 1
  return child_mut

def crossover(parent_1, parent_2):
  child_1, child_2 = parent_1.copy(), parent_2.copy()
  if np.random.rand() < 0.95:
    split_point = np.random.randint(1, len(child_1)-2)
    child_1 = np.append(parent_1[:split_point], parent_2[split_point:])
    child_2 = np.append(parent_2[:split_point], parent_1[split_point:])
  return [child_1, child_2]

def genetic_algorithm(max_gen):
  population = initialize()
  # print(population)
  gen_counter = 0
  while gen_counter < max_gen:
    gen_counter += 1
    scores = [evaluate(person) for person in population]    
    population = select(population, scores)
    np.random.shuffle(population)
    children = np.empty(0)
    for i in range(0, 10, 2):
      parent_1, parent_2 = population[i], population[i+1]
      for child in crossover(parent_1, parent_2):
        child = mutate(child)
        population = np.vstack((population, child))
    population = population.tolist()
  # print("Gen:", gen_counter)
  for x in population[0]:
    print(x)
  return population

if __name__ == "__main__":
    pop = genetic_algorithm(1000)